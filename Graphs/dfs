import java.util.*;
import java.util.Scanner;

public class Main {

    static class Graph {
        private int vertices;
        private ArrayList<ArrayList<Integer>> adjacencyList;

        public Graph(int vertices) {
            this.vertices = vertices;
            adjacencyList = new ArrayList<>(vertices);
            for (int i = 0; i < vertices; i++) {
                adjacencyList.add(new ArrayList<>());
            }
        }

        public void addEdge(int u, int v) {
            adjacencyList.get(u).add(v);
            // adjacencyList.get(v).add(u); // Uncomment for undirected graph
        }

        public void printGraph() {
            for (int i = 0; i < vertices; i++) {
                System.out.print(i + " -> ");
                for (Integer vertex : adjacencyList.get(i)) {
                    System.out.print(vertex + " ");
                }
                System.out.println();
            }
        }
        public void dfs(){
            Queue<Integer> q=new LinkedList<>();
            boolean[] vis=new boolean[vertices];
            q.add(0);
            vis[0]=true;
            while(!q.isEmpty()){
                int node=q.remove();
                System.out.print(node+" ");
                for(int i=0;i<adjacencyList.get(node).size();i++){
                    int nbr=adjacencyList.get(node).get(i);
                    if(!vis[nbr]){
                        vis[nbr]=true;
                        q.add(nbr);
                    }
                }
            }
        }
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the number of vertices: ");
        int n = sc.nextInt();
        Graph graph = new Graph(n);

        System.out.println("Enter the edges (u v). Enter a negative value to stop.");
        while (true) {
            int u = sc.nextInt();
            if (u < 0) break; // Stop if a negative value is entered
            int v = sc.nextInt();
            if (v < 0) break; // Stop if a negative value is entered
            graph.addEdge(u, v);
        }

        graph.printGraph();
        graph.dfs();
    }
}
